/*

Общая информация о базах данных.

 Примеры баз данных:
* картотека
* результаты переписи
* библиотеки
* книги учёта

 !!! Базы данных нужны для хранения, обработки и быстрого извлечения необходимой информации.

Иерархические базы данных. Задача про каталог картин.

* Необходимо составить базу данных для картинной галереи.
* Как сделать каталог картин так, чтобы можно было найти картину определенного автора или жанра?

Решение:
Разделяем художников на две группы: российские и зарубежные. 
Дальше разделяем по стилям, дальше — по именам и названиям картин.

Ограничения:
* У картины несколько авторов → теряется часть информации. При поиске авторов картины придётся пробежаться по всем художникам и проверить,
нет ли у них этой работы.
* Автор писал в разных жанрах → при поиске всех картин автора придётся искать внутри каждого жанра.

!!! При создании иерархической базы данных мы изначально фиксируем сценарий использования этой базы.

Иерархическая модель удобна, если она создаётся под конкретную задачу. 
Например, по данной модели каталога картин удобно находить все картины российских
художников или конкретный жанр картин российских художников.

Решение 2:

→ Предметный указатель: пронумеровать все картины и подготовить для них предметный указатель.

Самостоятельная работа.
Задача: написать иерархическую структуру, которая позволила бы из всего набора
картин легко находить те, что были созданы во второй половине XIX века.

Чем выше в иерархии расположена нужная нам информация, тем удобнее пользоваться этой иерархической структурой.
!!! Главное ограничение иерархической структуры — отсутствие гибкости. 
Она сразу определяет сценарий использования данных.

Реляционные базы данных. Задача про телефонный справочник.
Задача: создать собственный телефонный справочник.
Использовать электронные таблицы (Google Sheets, OpenOffice, MS Excel).

Решение 1:
Если надо позвонить определённому человеку, находим его номер по ФИО. 

Проблемы решения 1

* У человека несколько номеров телефона → добавить столбик «дополнительный номер телефона».
* Пустые ячейки (трата пространства из-за пустых ячеек).
* У разных людей может быть разное количество номеров.

Решение 2
* Распространить таблицу не в ширь, а в длину. Одна строка — один телефонный номер с ФИО и комментариями.
* Экономить пространство и не растягивать таблицу из-за одного человека.

Проблемы решения 2

* Информация дублируется. Если хранить ещё адрес, дату рождения и другую дополнительную информацию, она будет дублироваться 
в каждой ячейке с новым номером телефона одного человека. Если меняется адрес человека,придётся менять адрес в каждой из строк вручную.
* Слишком большой объём данных.

Решение 3
* Сделать дополнительную таблицу с дублирующейся информацией.
* База данных занимает меньше места.
* Информация по человеку хранится в основной таблице, одна строка соответствует одному человеку.
* Для связи с конкретным человеком используем дополнительную таблицу с номерами телефонов.

Проблемы решения 3

Люди с одинаковыми ФИО неразличимы: в дополнительной таблице нет информации, по которой их можно было бы различить.

Решение 4
* Добавить уникальные идентификаторы и по ним связывать таблицы между собой. 
  До сих пор мы связывали таблицы по ФИО.

Первичный ключ — ID, уникальная информация, которая позволяет идентифицировать каждую
конкретную запись таблицы.

Внешний ключ — ID из дополнительной таблицы (уже не уникальный). Позволяет найти
информацию из основной таблицы.

При связке нескольких таблиц необходим уникальный идентификатор.

Реляционные базы данных (от англ. Relation – связь) — базы данных, в которых данные распределены по отдельным, но связанным между собой таблицам. 
*/

/*
Урок 2. Работа с данными из разных таблиц. Извлечение данных.

Введение. Начало работы с файлом «Стартовый файл.
Телефонный справочник»

* Базы данных нужны для хранения, обработки и быстрого извлечения необходимой информации.
Задачи: извлечение информации вручную.
Задача 1. Вывести (выбрать) все данные из таблицы «Общий список»
Решение:  Вручную скопировать всю таблицу

Задача 2. Вывести (выбрать) столбцы «ФИО», «Тел», «Комментарий» из таблицы «Общий список».
Решение: Вручную выбираем необходимые столбики, копируем в новый файл.

Задача 3. Вывести (выбрать) столбцы «ФИО», «Тел», «Комментарий» из таблицы «Общий список», где статус = «холост».
Решение: Вручную копируем необходимые столбики по тем пользователям, у которых стоит статус «холост».

* Задачи: извлечение информации с помощью SQL

!!! В рамках лекции мы используем псевдокод!

* SQL – это особый язык программирования, который позволяет формулировать то, что нужно сделать с данными в таблицах.

Задача 1.
SELECT * FROM «Общий список»
SELECT – «выбери»;
*  – после SELECT указывается набор столбцов, * означает что мы хотим видеть все столбцы;
FROM – «из» указываем, откуда необходимо выбрать информацию;
Общий список – название таблицы из нашего примера.

Задача 2.
SELECT «ФИО», «Тел», «Комментарий». 
FROM «Общий список».

Задача 3.
SELECT «ФИО», «Тел», «Комментарий».
FROM «Общий список».
WHERE статус = «холост»
Значок «=» — если статус равен «холост», то условие выполняется.

Задачи: данные разбиты на несколько связанных таблиц.

Способы связывания таблиц между собой Похожи на операции со множествами:

* Примеры использования INNER JOIN
JOIN — объединение, INNER — внутренний:
INNER JOIN Люди, Телефоны
ON id = «Чей телефон»

Сначала из разных таблиц программа собирает одну таблицу по нашему условию, из которой мы можем получать информацию.

INNER JOIN Люди, Адреса_2 
ON id  = «Чей адрес»
Адреса_2 — в таблице есть адрес, который не относится ни к кому из указанных в таблице людей.

* Примеры использования LEFT JOIN
LEFT JOIN    Люди, Адреса_2
ON id = «Чей адрес»
Адреса_2 — в таблице есть адрес, который не относится ни к кому из указанных в таблице людей.

В новую таблицу переходят все данные из первой (левой) таблицы, к ним добавляются соответствующие данные из второй (правой).

Если мы поменяем местами таблички «Люди» и «Адреса_2», то «Адреса_2» будет слева, а «Люди» — справа.

В левой таблице «Адреса_2» есть данные, которых нет во второй таблице.
Эту запись переносим в новую таблицу. Соответствующего значения из второй таблицы нет, поэтому все ячейки с недостающими данными заполняем заглушкой «нет».
* С INNER JOIN не может быть пустых ячеек: он берёт только пересекающиеся значения.

* Примеры использования RIGHT JOIN
RIGHT JOIN «Люди», «Адреса_2»
ON id = «Чей адрес»
Берём все данные из таблицы «Адреса_2» и соответствующие им значения из таблицы «Люди», где id совпадает с «Чей адрес».

* LEFT JOIN и RIGHT JOIN не симметричны, но хорошо друг друга заменяют.

* Примеры использования FULL JOIN
Одновременное использование LEFT JOIN и RIGHT JOIN
Берём данные, которые:
1. есть в обеих таблицах;
2. есть только в левой таблице (недостающие
значения заполняем значением по
умолчанию, например, «нет»);
3. есть только в правой таблице (недостающие
значения заполняем значением по
умолчанию, например, «нет»).
*/




