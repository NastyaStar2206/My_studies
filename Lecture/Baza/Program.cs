/*

Общая информация о базах данных.

 Примеры баз данных:
* картотека
* результаты переписи
* библиотеки
* книги учёта

 !!! Базы данных нужны для хранения, обработки и быстрого извлечения необходимой информации.

Иерархические базы данных. Задача про каталог картин.

* Необходимо составить базу данных для картинной галереи.
* Как сделать каталог картин так, чтобы можно было найти картину определенного автора или жанра?

Решение:
Разделяем художников на две группы: российские и зарубежные. 
Дальше разделяем по стилям, дальше — по именам и названиям картин.

Ограничения:
* У картины несколько авторов → теряется часть информации. При поиске авторов картины придётся пробежаться по всем художникам и проверить,
нет ли у них этой работы.
* Автор писал в разных жанрах → при поиске всех картин автора придётся искать внутри каждого жанра.

!!! При создании иерархической базы данных мы изначально фиксируем сценарий использования этой базы.

Иерархическая модель удобна, если она создаётся под конкретную задачу. 
Например, по данной модели каталога картин удобно находить все картины российских
художников или конкретный жанр картин российских художников.

Решение 2:

→ Предметный указатель: пронумеровать все картины и подготовить для них предметный указатель.

Самостоятельная работа.
Задача: написать иерархическую структуру, которая позволила бы из всего набора
картин легко находить те, что были созданы во второй половине XIX века.

Чем выше в иерархии расположена нужная нам информация, тем удобнее пользоваться этой иерархической структурой.
!!! Главное ограничение иерархической структуры — отсутствие гибкости. 
Она сразу определяет сценарий использования данных.

Реляционные базы данных. Задача про телефонный справочник.
Задача: создать собственный телефонный справочник.
Использовать электронные таблицы (Google Sheets, OpenOffice, MS Excel).

Решение 1:
Если надо позвонить определённому человеку, находим его номер по ФИО. 

Проблемы решения 1

* У человека несколько номеров телефона → добавить столбик «дополнительный номер телефона».
* Пустые ячейки (трата пространства из-за пустых ячеек).
* У разных людей может быть разное количество номеров.

Решение 2
* Распространить таблицу не в ширь, а в длину. Одна строка — один телефонный номер с ФИО и комментариями.
* Экономить пространство и не растягивать таблицу из-за одного человека.

Проблемы решения 2

* Информация дублируется. Если хранить ещё адрес, дату рождения и другую дополнительную информацию, она будет дублироваться 
в каждой ячейке с новым номером телефона одного человека. Если меняется адрес человека,придётся менять адрес в каждой из строк вручную.
* Слишком большой объём данных.

Решение 3
* Сделать дополнительную таблицу с дублирующейся информацией.
* База данных занимает меньше места.
* Информация по человеку хранится в основной таблице, одна строка соответствует одному человеку.
* Для связи с конкретным человеком используем дополнительную таблицу с номерами телефонов.

Проблемы решения 3

Люди с одинаковыми ФИО неразличимы: в дополнительной таблице нет информации, по которой их можно было бы различить.

Решение 4
* Добавить уникальные идентификаторы и по ним связывать таблицы между собой. 
  До сих пор мы связывали таблицы по ФИО.

Первичный ключ — ID, уникальная информация, которая позволяет идентифицировать каждую
конкретную запись таблицы.

Внешний ключ — ID из дополнительной таблицы (уже не уникальный). Позволяет найти
информацию из основной таблицы.

При связке нескольких таблиц необходим уникальный идентификатор.

Реляционные базы данных (от англ. Relation – связь) — базы данных, в которых данные распределены по отдельным, но связанным между собой таблицам. 
*/



